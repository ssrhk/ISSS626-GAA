---
title: "Hands-on Exercise 1"
author: "Sei Sar Hla Kyi"
date: "31 August 2024"
date-modified: "31 August 2024"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

# **1 Geospatial Data Science with R**

Install and launching R packages

The code chunk below uses p_load of pacman package to check if tidyverse packages are installed in the computer. If they are, they will be launched into R.

```{r}
pacman::p_load(sf,tidyverse)
```

## **Importing the Geospatial data**

```{r}
mpsz = st_read(dsn = "chap01/data/geospatial", 
              layer = "MP14_SUBZONE_WEB_PL")
```

```{r}
cyclingpath = st_read(dsn = "chap01/data/geospatial", 
                      layer = "CyclingPathGazette")

preschool = st_read("chap01/data/geospatial/PreSchoolsLocation.kml")
```

Checking content & Data Type

```{r}
st_geometry(mpsz)
glimpse(mpsz)
head(mpsz, n=5)  
```

Plot

```{r}
plot(mpsz)
plot(st_geometry(mpsz))
plot(mpsz["PLN_AREA_N"])
```

Coordinates

```{r}
st_crs(mpsz)

```

Assigning correct ESPG code

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
st_crs(mpsz3414)
```

Projecting

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
st_geometry(preschool3414)
```

## **Importing the Aspatial Data**

```{r}
listings <- read_csv("chap01/data/aspatial/listings.csv")
```

Examine if correctly imported

```{r}
list(listings) 
```

### Convert into simple data frame

```{r}
listings_sf <- st_as_sf(listings, 
                        coords = c("longitude", "latitude"),
                        crs=4326) %>%
  st_transform(crs = 3414)

glimpse(listings_sf)
```

New column geometry is added, longitude and latitude dropped

### Buffering (compute 5 meters buffer around cycling path )

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                            dist=5, nQuadSegs = 30)
buffer_cycling$AREA <- st_area(buffer_cycling) #$ sign updates/creates AREA column
sum(buffer_cycling$AREA)
```

Identify pre-schools in zone and calculate number of preschools

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
summary(mpsz3414$`PreSch Count`)
```

Most number of preschools

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

Density of pre-school by planning subzone

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area() #Area of each subzone

mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## **Exploratory Data Analysis (EDA)**

-   Creating a histogram

```{r}
hist(mpsz3414$`PreSch Density`)
```

Use this code chunk for good quality historgrams

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
       x = "Pre-school density (per km sq)",
       y = "Frequency")
```

-   Creating a scatterplot

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
       x = "Pre-school density (per km sq)",
       y = "Pre-school count")
```

# 2 Thematic Mapping and GeoVisualisation with R

Install and load the packages

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

Importing and Checking the data

```{r}
mpsz <- st_read(dsn = "chap02", 
                layer = "MP14_SUBZONE_WEB_PL")
mpsz

popdata <- read_csv("chap02/respopagesextod2011to2020.csv")
```

## Data Preparation

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>% #Filtering for the Year 2020
  group_by(PA, SZ, AG) %>% #Grouping and Summarizing Data
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>% # Transform : Each unique value in the AG (age group) column becomes a new column, with the population counts (POP) as the values in these new columns.
  mutate(YOUNG = rowSums(.[3:6]) # creates a new column YOUNG that sums the populations of the young age groups, which are stored in columns 3 to 6 and 12.
         +rowSums(.[12])) %>%
  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
           rowSums(.[13:15]))%>%
  mutate(`AGED`=rowSums(.[16:21])) %>%
  mutate(`TOTAL`=rowSums(.[3:21])) %>%  
  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
         /`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
         `ECONOMY ACTIVE`, `AGED`, 
         `TOTAL`, `DEPENDENCY`)
```

Convert the values in PA and SZ fields to uppercase

```{r}
popdata2020 <- popdata2020 %>%
    mutate_at(.vars = vars(PA, SZ), 
              .funs = list(toupper)) %>%
    filter(`ECONOMY ACTIVE` > 0)
popdata2020
```

Left join - left data table is to ensure that the output will be a simple features data frame.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

Saving the left joined table

```{r}
write_rds(mpsz_pop2020, "chap02/mpszpop2020.rds")
```

## Choropleth Map using tmap

### qtm

```{r}
tmap_mode("plot") #for interactive mode use "view"
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

### tmap

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

Some base maps

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons()

tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5)

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

### Custom Breaks

```{r}
summary(mpsz_pop2020$DEPENDENCY)

```

Set break point at 0.60, 0.70, 0.80, and 0.90

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

### Colour Scheme

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "-Greens") +
  tm_borders(alpha = 0.5)
```

### Map Layout

#### Map Legend

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

#### Map Style

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

Adding compass and grid lines

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

Restoring default

```{r}
tmap_style("white")
```

#### Assigning multiple values to at least one of the aesthetic arguments

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")

tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
              style = c("equal", "quantile"), 
              palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```

#### Group by variable

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)

```

### Multiple stand-alone maps with tmap_arrange()

```{r}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

### With a selection criterion

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```
