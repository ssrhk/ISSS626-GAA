---
title: "Hands-on Exercise 2"
author: "Sei Sar Hla Kyi"
date: "31 August 2024"
date-modified: "31 August 2024"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

Install and launch the five R packages

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse)
```

# 4 **1st Order Spatial Point Patterns Analysis Methods**

Import the data

```{r}
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```

```{r}
sg_sf <- st_read(dsn = "data", layer="CostalOutline")
```

```{r}
mpsz_sf <- st_read(dsn = "data", 
                layer = "MP14_SUBZONE_WEB_PL")
```

Assigning the correct crs (3414: Singapore National Coordinate system) to mpsz_sf and sg_sf simple feature data frames

```{r}
st_crs(mpsz_sf)
st_crs(sg_sf)
```

```{r}
mpsz3414 <- st_set_crs(mpsz_sf, 3414)
st_crs(mpsz3414)
```

```{r}
sgsf3414 <- st_set_crs(sg_sf, 3414)
st_crs(sgsf3414)
```

Mapping the geospatial data sets

```{r}
mpsz_childcare <- st_join(childcare_sf, mpsz3414, join = st_within, left = TRUE)
```

```{r}
tmap_mode('plot')
tm_shape(mpsz_childcare) +
  tm_dots()
```

```{r}
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()
```

# Geospatial Data Wrangling

as_Spatial: Convert the three geospatial data from simple feature data frame to sp’s Spatial\* class.

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

```{r}
childcare
```

```{r}
mpsz
```

```{r}
sg
```

There is no direct way to convert a Spatial\* classes into ppp object. We need to convert the Spatial classes\* into Spatial object first.

## Converting the Spatial\* class into generic sp format

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

```{r}
childcare_sp
```

```{r}
sg_sp
```

## **Converting the generic sp format into spatstat’s ppp format**

```{r}
childcare_ppp <- as.ppp(childcare_sf)
childcare_ppp
```

```{r}
plot(childcare_ppp)
```

```{r}
summary(childcare_ppp)
```

## **Handling duplicated points**

```{r}
any(duplicated(childcare_ppp))
```

Multiplicity To count the number of co-indicence point

```{r}
multiplicity(childcare_ppp)
```

How many locations have more than one point event

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

```{r}
tmap_mode('view')
tm_shape(childcare) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

To solve this problem:

-   delete the duplicates

-   use *jittering*, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.

    ```{r}
    childcare_ppp_jit <- rjitter(childcare_ppp, 
                                 retry=TRUE, 
                                 nsim=1, 
                                 drop=TRUE)
    ```

    ```{r}
    any(duplicated(childcare_ppp_jit))
    ```

-   make each point “unique” and then attach the duplicates of the points to the patterns as **marks**, as attributes of the points. Then you would need analytical techniques that take into account these marks.

## **Creating *owin* object**

```{r}
sg_owin <- as.owin(sg_sf)
```

```{r}
plot(sg_owin)
```

```{r}
summary(sg_owin)
```

## **Combining point events object and *owin* object**

Extract childcare events that are located within Singapore

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

```{r}
summary(childcareSG_ppp)
```

```{r}
plot(childcareSG_ppp)
```

## **First-order Spatial Point Patterns Analysis**

### **Kernel Density Estimation**

Computing kernel density estimation using automatic bandwidth selection method

```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
```

```{r}
plot(kde_childcareSG_bw)

```

```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```

Rescaling the KDE values to comprehend

```{r}
childcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, "km")
```

```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw)
```

### **Working with different automatic badwidth methods**

```{r}
 bw.CvL(childcareSG_ppp.km)
```

```{r}
bw.scott(childcareSG_ppp.km)
```

```{r}
bw.ppl(childcareSG_ppp.km)
```

```{r}
bw.diggle(childcareSG_ppp.km)
```

bw.ppl() tends to produce the more appropriate values when the pattern consists predominantly of tight clusters.

If the purpose of once study is to detect a single tight cluster in the midst of random noise then the *bw.diggle()* method seems to work best

```{r}
kde_childcareSG.ppl <- density(childcareSG_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```

### **Working with different kernel methods**

```{r}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```

## **Fixed and Adaptive KDE**

Computing KDE using Fixed bandwidth

```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)
```

Computing KDE by using adaptive bandwidth

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
plot(kde_childcareSG_adaptive)
```

```{r}
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

### **Converting KDE output into grid object**

```{r}
gridded_kde_childcareSG_bw <- as(kde_childcareSG.bw,"SpatialGridDataFrame")
spplot(gridded_kde_childcareSG_bw)

```

Converting output into raster

```{r}
kde_childcareSG_bw_raster <- raster(kde_childcareSG.bw)
```

```{r}
kde_childcareSG_bw_raster
```

to include the CRS information on kde_childcareSG_bw_raster RasterLayer.

```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster

```

### **Visualising the output in tmap**

```{r}
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("layer", palette = "viridis") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

### **Comparing Spatial Point Patterns using KDE**

```{r}
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
```

```{r}
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
```

```{r}
plot(tm, main = "Tampines")
```

```{r}
plot(jw, main = "Jurong West")
```

```{r}
plot(ck, main = "Choa Chu Kang")
```

Convert these sf objects into owin objects that is required by **spatstat**

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

Combining childcare points and study area

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

Transform the unit of measurement from metre to kilometre

```{r}
childcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, "km")
```

```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

Compute the KDE of these four planning area. ***bw.diggle*** method is used to derive the bandwidth of each

```{r}
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tempines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
```

Fixed bandwidth as 250m(0.25)

```{r}
par(mfrow=c(2,2))
plot(density(childcare_ck_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Chou Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
```

## **Nearest Neighbour Analysis**

The test hypotheses are:

Ho = The distribution of childcare services are randomly distributed.

H1= The distribution of childcare services are not randomly distributed.

The 95% confident interval will be used.

### **Testing spatial point patterns using Clark and Evans Test**

```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```

Given that R=0.55631 and the p-value is extremely small (much less than 0.05), we will reject the null hypothesis that the distribution of childcare services is random. The test result strongly supports the alternative hypothesis that the distribution of childcare services is not random and is, in fact, clustered.

```{r}
clarkevans.test(childcare_ck_ppp,#For choa chu kang planning area
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

Given that R=0.96173 is close to 1, and the p-value of 0.5675 is much higher than 0.05, we **cannot reject the null hypothesis** that the distribution of childcare services is random.

**Conclusion:** The distribution of childcare services in this case does not significantly differ from a random distribution. In other words, the locations of childcare services are neither significantly clustered nor regularly spaced; they are likely randomly distributed across Choa Chu Kang.

```{r}
clarkevans.test(childcare_tm_ppp, #tampines
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

Given that R=0.79197 is less than 1 and the p-value of 0.0001737 is very small (much less than 0.05), we **can reject the null hypothesis** that the distribution of childcare services is random.

**Conclusion:** The distribution of childcare services is significantly clustered. The locations of childcare services are closer together than would be expected under a random distribution, indicating a pattern of clustering in Tampines.

# **5  2nd Order Spatial Point Patterns Analysis Methods**

## **Analysing Spatial Point Process Using G-Function**

The G function measures the distribution of the distances from an arbitrary event to its nearest event.

#### Choa Chu Kang area

Computing G-function estimation

```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo Test

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

```{r}
plot(G_CK.csr)
```

#### **Tampines area**

```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
```

```{r}
plot(G_tm.csr)
```

**Key Components of the Plot to look out for:**

1.  Black Line: This is the observed G-function, which represents the cumulative distribution of distances between the points (childcare services).

2.  Red Dashed Line: This is the theoretical G-function representing what is expected if the points were randomly distributed.

3.  Gray Shaded Area: These represent the upper and lower bounds of the G-function envelope, generated from 999 simulations. The envelope gives a range of G-function values that would be expected under random distribution.

If the observed G-function (black line) falls within the gray envelope, there is no significant deviation from CSR, meaning that the distribution could be random.

For Tampines, the black line lies above the red dashed line and also extends beyond the gray envelope for most of the range of r. The null hypothesis (that the distribution of childcare services in Tampines is random) should be rejected. This suggests that the distribution of childcare services is not random and is likely clustered.

## **Analysing Spatial Point Process Using F-Function**

The F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.

#### Choa Chu Kang area

```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```

### **Performing Complete Spatial Randomness Test**

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
```

```{r}
plot(F_CK.csr)
```

#### Tampines Planning Area

```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
```

```{r}
plot(F_tm.csr)
```

**Key Components of the Plot to look out for:**

1.  Black Line: This is the observed F-function, which represents the cumulative distribution of distances from a typical location to the nearest point (childcare service).

2.  Red Dashed Line: This is the theoretical F-function representing what we would expect if the points were randomly distributed.

3.  Gray Shaded Area: These represent the upper and lower bounds of the F-function envelope, generated from 999 simulations under CSR. The envelope provides a range of F-function values that would be expected under random distribution.

If the observed F-function (black line) falls within the gray envelope, there is no significant deviation from CSR, meaning that the distribution could be random.

In Tampines, since the observed F-function generally stays within the envelope, the null hypothesis (that the distribution of childcare services in Tampines is random) cannot be rejected. This suggests that the distribution of childcare services does not significantly deviate from what would be expected under CSR at the significance level of 0.001.

## **Analysing Spatial Point Process Using K-Function**

K-function measures the number of events found up to a given distance of any particular event

#### Choa Chu Kang planning area

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

#### Tampines Planning area

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

**Key Components of the Plot to look out for:**

-   Black Line: This is the observed K-function with the linear r-term subtracted. The KK-function typically increases with distance r, and subtracting r makes it easier to see deviations from the expected pattern.

-   Red Dashed Line: This is the theoretical K-function (with the r-term subtracted). If the points were randomly distributed, the observed K-function should follow this line.

-   Gray Shaded Area: These represent the upper and lower bounds of the K-function envelope generated from simulations under CSR. The envelope shows the range of expected values if the distribution were random.

If the observed K-function (black line) falls within the gray envelope, there is no significant deviation from CSR, implying that the points could be randomly distributed.

Since the observed K-function is significantly above the envelope, this suggests strong evidence of clustering. The childcare services in Tampines are more clustered than would be expected under a random distribution. Null hypothesis should be rejected.

## **Analysing Spatial Point Process Using L-Function**

Purpose of the L-function is to linearize the K function, making it easier to interpret the spatial patterns of point processes (e.g., clustering, regularity, or randomness).

#### Choa Chu Kang planning area

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.

```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

#### Tampines Planning area

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```
