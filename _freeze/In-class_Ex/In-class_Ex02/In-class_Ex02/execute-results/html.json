{
  "hash": "22c8ded8b938730bd8bc53473fe6bd7e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 2\"\nauthor: \"Sei Sar Hla Kyi\"\ndate: \"2 September 2024\"\ndate-modified: \"2 September 2024\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n# **Issue 1: Installing maptools (For sp method)**\n\nFor R shiny, Posit Public Package manager\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"maptools\",repos= \"https://packagemanager.posit.co/cran/2023-10-13\")\n```\n:::\n\n\n# **Issue 2: creating coastal outline**\n\nsp - store spatial data (import and export)\n\nsf - programmatic gis software\n\n-   st_combine()- map no boundaries (with control)\n\n-   st_union()- no control\n\n*Need this code to run %\\>%*\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, raster, spatstat, tmap, tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_sf <- st_read(dsn = \"data\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/seesarhlakyi/Desktop/ssrhk/ISSS626-GAA/In-class_Ex/In-class_Ex02/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_sf <- mpsz_sf %>%\n  st_union()\n\nplot(sg_sf)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n# **Issue 3: spatstat.geom**\n\n-   ppp - use this if input data is sp object (Don't use sp)\n\n-   **as.ppp** - use this if input data is sf object, allow to create point object\n\n-   **as.owin** - use this if input data is polygon, give boundary (ALL SPATIAL DATA NEED THIS)\n\n# **Kernel Density Estimation**\n\nAssuming that maptools is installed\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_sf <- st_read(\"data/child-care-services-geojson.geojson\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `child-care-services-geojson' from data source \n  `/Users/seesarhlakyi/Desktop/ssrhk/ISSS626-GAA/In-class_Ex/In-class_Ex02/data/child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nsg_sf <- st_read(dsn = \"data\", layer=\"CostalOutline\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `CostalOutline' from data source \n  `/Users/seesarhlakyi/Desktop/ssrhk/ISSS626-GAA/In-class_Ex/In-class_Ex02/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_ppp <- as.ppp(childcare_sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in as.ppp.sf(childcare_sf): only first attribute column is used for\nmarks\n```\n\n\n:::\n\n```{.r .cell-code}\nchildcare_ppp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern: 1545 points\nmarks are of storage type  'character'\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n```\n\n\n:::\n\n```{.r .cell-code}\nsg_owin <- as.owin(sg_sf)\nchildcareSG_ppp = childcare_ppp[sg_owin]\nchildcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, \"km\")\n\nbw <- bw.diggle(childcareSG_ppp)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG_adaptive <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_adaptive)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nA way to do this without maptools\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngridded_kde_childcareSG_ad <- as(kde_childcareSG_adaptive,\"SpatialGridDataFrame\")\nspplot(gridded_kde_childcareSG_ad)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n# **Monte Carlo Simulation**\n\nAt the very beginning start with set.seed(1234)\n\n# **Edge Correction**\n\nAvoid biasness if data point occur at the edge of study area\n\nnone: don't do edge correction ( if it's not necessary, don't do it)\n\nDifferent configuration do different things\n\n# Importing Thai Road Accident Data\n\nData-preparation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_sf <- read_csv(\"data/thai_road_accident_2019_2022.csv\") %>%\n  filter (!is.na(longitude) & longitude != \"\",\n          !is.na(latitude ) & latitude != \"\") %>%\n  st_as_sf(coords = c(\n    \"longitude\", \"latitude\"),\n    crs=4326) %>%\n  st_transform(crs=32647)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 81735 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (10): province_th, province_en, agency, route, vehicle_type, presumed_c...\ndbl   (6): acc_code, number_of_vehicles_involved, number_of_fatalities, numb...\ndttm  (2): incident_datetime, report_datetime\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nCannot lose more than 25% cannot lose (for big datasets)\n",
    "supporting": [
      "In-class_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}