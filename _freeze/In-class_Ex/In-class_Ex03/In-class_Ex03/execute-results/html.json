{
  "hash": "114aa16fe0d10a770d4f689d251fe139",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 3\"\nauthor: \"Sei Sar Hla Kyi\"\ndate: \"9 September 2024\"\ndate-modified: \"9 September 2024\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\nsf: to import spatial data and write data out into rds format (R data form)\n\nspNetwork: network constrained KDE, input will always be in a form of sf , not neccessary to convert to ppp format\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spNetwork, tmap, tidyverse)\n```\n:::\n\n\n# Import the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnetwork <- st_read(dsn=\"data/geospatial\", \n                   layer=\"Punggol_St\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Punggol_St' from data source \n  `/Users/seesarhlakyi/Desktop/ssrhk/ISSS626-GAA/In-class_Ex/In-class_Ex03/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\n```\n\n\n:::\n:::\n\n\n::: callout-tip\n## TIP! Save the filtered data into rds format\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare <- st_read(dsn=\"data/geospatial\",\n                     layer=\"Punggol_CC\") %>%\n  st_zm(drop=TRUE,what= \"ZM\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Punggol_CC' from data source \n  `/Users/seesarhlakyi/Desktop/ssrhk/ISSS626-GAA/In-class_Ex/In-class_Ex03/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n```\n\n\n:::\n:::\n\n\n# Plot the map\n\nCorrect Answer: Pulling the geometry without value attribute.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(network))\nplot(childcare,add=T,col='red',pch=19)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex03_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nWhy you can't do plot(network): Individual columns from network were brought out (there are two columns)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(network)\nplot(childcare,add=T,col='red',pch=19)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex03_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n# Plot using tmap library.\n\nSpecify the layer as tm_shape\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(childcare) + \n  tm_dots(col='red') + \n  tm_shape(network) +\n  tm_lines()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex03_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n# Preparing lixel objects\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlixels <- lixelize_lines(network,700,mindist=350)\n```\n:::\n\n\n700 m based on NTU research on willingness to walk.\n\n350 mindist is by instinct.\n\nSplit into line segment\n\nAs long as road segments pick up some data points, it is good.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples <- lines_center(lixels) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(lixels) +\n  tm_lines()+\ntm_shape(samples) +\n  tm_dots(size=0.01)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex03_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n# Performing NKDE\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndensities <- nkde(network, \n                  events = childcare,\n                  w = rep(1, nrow(childcare)),\n                  samples = samples,\n                  kernel_name = \"quartic\",\n                  bw = 300, \n                  div= \"bw\", \n                  method = \"simple\", \n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(1,1), \n                  max_depth = 8,\n                  agg = 5, \n                  sparse = TRUE,\n                  verbose = FALSE)\n```\n:::\n\n\nSee 'values' in R Environment to view density values.\n\nCreate new field to input those densities.\n\n::: callout-tip\n## TIP! Don't sort! The sequence will change\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples$density <- densities\nlixels$density <- densities\n```\n:::\n\n\nScale it up.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples$density <- densities*1000\nlixels$density <- densities*1000\n```\n:::\n\n\n::: callout-note\n## Include metric (kilometer) in Legend\n:::\n\n# **K Function**\n\nplotk: accumulative\n\nplotg: ring by ring\n\nboth use kfunction (\\_)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_childcare <- kfunctions(network, \n                             childcare,\n                             start = 0, \n                             end = 1000, \n                             step = 50, \n                             width = 50, \n                             nsim = 50, \n                             resolution = 50,\n                             verbose = FALSE, \n                             conf_int = 0.05)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_childcare$plotk\n```\n\n::: {.cell-output-display}\n![](In-class_Ex03_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_childcare$plotg\n```\n\n::: {.cell-output-display}\n![](In-class_Ex03_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}