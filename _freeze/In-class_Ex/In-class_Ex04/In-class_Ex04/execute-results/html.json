{
  "hash": "f9917150d1917058dbc93ea31ca79c8a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In Class Exercise 4\"\nauthor: \"Sei Sar Hla Kyi\"\ndate: \"16 September 2024\"\ndate-modified: \"16 September 2024\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n# Geographically Weighted Summary Statistics - gwModel Methods\n\nLoad the packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, ggstatsplot, spdep, tmap, tidyverse, knitr, GWmodel)\n```\n:::\n\n\n## 1. Import and prepare the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Hunan' from data source \n  `/Users/seesarhlakyi/Desktop/ssrhk/ISSS626-GAA/In-class_Ex/In-class_Ex04/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nJoin the two dataframes.\n\n-   Need to have a common identifier, then select the columns to retain.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- left_join(hunan_sf,hunan2012)%>% select(1:3, 7, 15, 16, 31, 32)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(County)`\n```\n\n\n:::\n:::\n\n\n::: callout-note\n## GWmodel presently is built around the older sp and not sf formats for handling spatial data in R\n:::\n\nConverting to SpatialPolygonDataFrame (list object)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sp <- hunan %>%\n  as_Spatial()\n```\n:::\n\n\n## 2. Geographically Weighted Summary Statistics with Adaptive Bandwidths\n\n### 2.1 Determine Adaptive Bandwidth\n\n::: panel-tabset\n## Cross Validation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV<- bw.gwr(GDPPC ~ 1,\n               data = hunan_sp,\n               approach= \"CV\",\n               adaptive = TRUE,\n               kernel = \"bisquare\",\n               longlat = T) #Great circle distances will be calculated\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 22\n```\n\n\n:::\n:::\n\n\n## AIC\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC<- bw.gwr(GDPPC ~ 1,\n               data = hunan_sp,\n               approach= \"AIC\",\n               adaptive = TRUE,\n               kernel = \"bisquare\",\n               longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 22\n```\n\n\n:::\n:::\n\n:::\n\n::: callout-note\n## Take note the AIC values are in kilometer! Both bw_AIC and bw_CV returns 22, that means 22 neighbours\n:::\n\n#### 2.1.1 Computing geographically weighted summary statistics\n\nOnce we have the object, pass it over to gwss()\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat <- gwss (data = hunan_sp,\n                vars = \"GDPPC\",\n                bw = bw_AIC,\n                kernel = \"bisquare\", # These 3 must be the same as the kernel in calculation above\n                adaptive = TRUE,\n                longlat = T)\n```\n:::\n\n\n::: callout-note\n## The output is a gwss object (list)!\n:::\n\nThe output dataframe calculated based on the neighbours:\n\n-   LM : local mean\n\n-   LSD: local standard deviation\n\n-   LVar: local variance\n\n-   LSKe: standard estimations\n\n-   LCV: local correlation variance\n\n#### 2.1.2 Preparing output data\n\nExtract SDF data tables from gwss object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_df <- as.data.frame(gwstat$SDF)\n```\n:::\n\n\n***cbind()*** is used to append newly derived dataframe onto 'hunan_sf' dataframe.\n\n::: callout-note\n## Cbind() appends blindly with the understanding that there is no changes in the order!\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_gstat <- cbind(hunan_sf,gwstat_df)\n```\n:::\n\n\n#### 2.1.3 Visualizing Geographically weighted summary Statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan_gstat) +\n  tm_fill('GDPPC_LM',\n          n=5,\n          style=\"quantile\") +\n  tm_borders(alpha =0.5) + #tm_fill + tm_borders same as tm_polygons\n  # closer to 0 will be lighter\n  tm_layout(main.title=\"Distribution of geographically weighted mean\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.text.size= 0.5,\n            legend.height = 1.5,\n            legend.width = 1.5,\n            frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n#### 2.1.4 Visualizing Correlation\n\n**Business question: Is there any relationship between GDP per capita and Gross Industry Output?**\n\n***Global Correlation Plot***\n\nusing ggplot2\n\nIt is very close to 1 so there is very strong correlation.\n\n***Local Correlation***\n\n-   Which areas are below the global correlation coefficient?\n\n###  2.2 Determine Fixed Bandwidth\n\n::: panel-tabset\n## Cross validation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV_fixed<- bw.gwr(GDPPC ~ 1,\n               data = hunan_sp,\n               approach= \"CV\",\n               adaptive = FALSE,\n               kernel = \"bisquare\",\n               longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV_fixed\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 76.29126\n```\n\n\n:::\n:::\n\n\n## AIC\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC_fixed<- bw.gwr(GDPPC ~ 1,\n               data = hunan_sp,\n               approach= \"AIC\",\n               adaptive = FALSE,\n               kernel = \"bisquare\",\n               longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC_fixed\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 160.5517\n```\n\n\n:::\n:::\n\n:::\n\n::: callout-note\n## These results are in kilometer. Not in number of neighbours. Test different methods!\n:::\n",
    "supporting": [
      "In-class_Ex04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}